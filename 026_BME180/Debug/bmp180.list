
bmp180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003768  08003768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800378c  0800378c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  080037a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080037a0  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006e0f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000142d  00000000  00000000  00026e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  000282c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054d  00000000  00000000  000289b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014993  00000000  00000000  00028efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093f5  00000000  00000000  0003d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080f2c  00000000  00000000  00046c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cb0  00000000  00000000  000c7bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c9864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003750 	.word	0x08003750

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003750 	.word	0x08003750

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b970 	b.w	8000b3c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9e08      	ldr	r6, [sp, #32]
 800087a:	460d      	mov	r5, r1
 800087c:	4604      	mov	r4, r0
 800087e:	460f      	mov	r7, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4694      	mov	ip, r2
 8000888:	d965      	bls.n	8000956 <__udivmoddi4+0xe2>
 800088a:	fab2 f382 	clz	r3, r2
 800088e:	b143      	cbz	r3, 80008a2 <__udivmoddi4+0x2e>
 8000890:	fa02 fc03 	lsl.w	ip, r2, r3
 8000894:	f1c3 0220 	rsb	r2, r3, #32
 8000898:	409f      	lsls	r7, r3
 800089a:	fa20 f202 	lsr.w	r2, r0, r2
 800089e:	4317      	orrs	r7, r2
 80008a0:	409c      	lsls	r4, r3
 80008a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008a6:	fa1f f58c 	uxth.w	r5, ip
 80008aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ae:	0c22      	lsrs	r2, r4, #16
 80008b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b8:	fb01 f005 	mul.w	r0, r1, r5
 80008bc:	4290      	cmp	r0, r2
 80008be:	d90a      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c0:	eb1c 0202 	adds.w	r2, ip, r2
 80008c4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008c8:	f080 811c 	bcs.w	8000b04 <__udivmoddi4+0x290>
 80008cc:	4290      	cmp	r0, r2
 80008ce:	f240 8119 	bls.w	8000b04 <__udivmoddi4+0x290>
 80008d2:	3902      	subs	r1, #2
 80008d4:	4462      	add	r2, ip
 80008d6:	1a12      	subs	r2, r2, r0
 80008d8:	b2a4      	uxth	r4, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008e6:	fb00 f505 	mul.w	r5, r0, r5
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	d90a      	bls.n	8000904 <__udivmoddi4+0x90>
 80008ee:	eb1c 0404 	adds.w	r4, ip, r4
 80008f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008f6:	f080 8107 	bcs.w	8000b08 <__udivmoddi4+0x294>
 80008fa:	42a5      	cmp	r5, r4
 80008fc:	f240 8104 	bls.w	8000b08 <__udivmoddi4+0x294>
 8000900:	4464      	add	r4, ip
 8000902:	3802      	subs	r0, #2
 8000904:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	2100      	movs	r1, #0
 800090c:	b11e      	cbz	r6, 8000916 <__udivmoddi4+0xa2>
 800090e:	40dc      	lsrs	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	e9c6 4300 	strd	r4, r3, [r6]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0xbc>
 800091e:	2e00      	cmp	r6, #0
 8000920:	f000 80ed 	beq.w	8000afe <__udivmoddi4+0x28a>
 8000924:	2100      	movs	r1, #0
 8000926:	e9c6 0500 	strd	r0, r5, [r6]
 800092a:	4608      	mov	r0, r1
 800092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000930:	fab3 f183 	clz	r1, r3
 8000934:	2900      	cmp	r1, #0
 8000936:	d149      	bne.n	80009cc <__udivmoddi4+0x158>
 8000938:	42ab      	cmp	r3, r5
 800093a:	d302      	bcc.n	8000942 <__udivmoddi4+0xce>
 800093c:	4282      	cmp	r2, r0
 800093e:	f200 80f8 	bhi.w	8000b32 <__udivmoddi4+0x2be>
 8000942:	1a84      	subs	r4, r0, r2
 8000944:	eb65 0203 	sbc.w	r2, r5, r3
 8000948:	2001      	movs	r0, #1
 800094a:	4617      	mov	r7, r2
 800094c:	2e00      	cmp	r6, #0
 800094e:	d0e2      	beq.n	8000916 <__udivmoddi4+0xa2>
 8000950:	e9c6 4700 	strd	r4, r7, [r6]
 8000954:	e7df      	b.n	8000916 <__udivmoddi4+0xa2>
 8000956:	b902      	cbnz	r2, 800095a <__udivmoddi4+0xe6>
 8000958:	deff      	udf	#255	; 0xff
 800095a:	fab2 f382 	clz	r3, r2
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 8090 	bne.w	8000a84 <__udivmoddi4+0x210>
 8000964:	1a8a      	subs	r2, r1, r2
 8000966:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800096a:	fa1f fe8c 	uxth.w	lr, ip
 800096e:	2101      	movs	r1, #1
 8000970:	fbb2 f5f7 	udiv	r5, r2, r7
 8000974:	fb07 2015 	mls	r0, r7, r5, r2
 8000978:	0c22      	lsrs	r2, r4, #16
 800097a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800097e:	fb0e f005 	mul.w	r0, lr, r5
 8000982:	4290      	cmp	r0, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x124>
 8000986:	eb1c 0202 	adds.w	r2, ip, r2
 800098a:	f105 38ff 	add.w	r8, r5, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x122>
 8000990:	4290      	cmp	r0, r2
 8000992:	f200 80cb 	bhi.w	8000b2c <__udivmoddi4+0x2b8>
 8000996:	4645      	mov	r5, r8
 8000998:	1a12      	subs	r2, r2, r0
 800099a:	b2a4      	uxth	r4, r4
 800099c:	fbb2 f0f7 	udiv	r0, r2, r7
 80009a0:	fb07 2210 	mls	r2, r7, r0, r2
 80009a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x14e>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b8:	d202      	bcs.n	80009c0 <__udivmoddi4+0x14c>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	f200 80bb 	bhi.w	8000b36 <__udivmoddi4+0x2c2>
 80009c0:	4610      	mov	r0, r2
 80009c2:	eba4 040e 	sub.w	r4, r4, lr
 80009c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ca:	e79f      	b.n	800090c <__udivmoddi4+0x98>
 80009cc:	f1c1 0720 	rsb	r7, r1, #32
 80009d0:	408b      	lsls	r3, r1
 80009d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009da:	fa05 f401 	lsl.w	r4, r5, r1
 80009de:	fa20 f307 	lsr.w	r3, r0, r7
 80009e2:	40fd      	lsrs	r5, r7
 80009e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e8:	4323      	orrs	r3, r4
 80009ea:	fbb5 f8f9 	udiv	r8, r5, r9
 80009ee:	fa1f fe8c 	uxth.w	lr, ip
 80009f2:	fb09 5518 	mls	r5, r9, r8, r5
 80009f6:	0c1c      	lsrs	r4, r3, #16
 80009f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009fc:	fb08 f50e 	mul.w	r5, r8, lr
 8000a00:	42a5      	cmp	r5, r4
 8000a02:	fa02 f201 	lsl.w	r2, r2, r1
 8000a06:	fa00 f001 	lsl.w	r0, r0, r1
 8000a0a:	d90b      	bls.n	8000a24 <__udivmoddi4+0x1b0>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a14:	f080 8088 	bcs.w	8000b28 <__udivmoddi4+0x2b4>
 8000a18:	42a5      	cmp	r5, r4
 8000a1a:	f240 8085 	bls.w	8000b28 <__udivmoddi4+0x2b4>
 8000a1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a22:	4464      	add	r4, ip
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	b29d      	uxth	r5, r3
 8000a28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x1da>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a44:	d26c      	bcs.n	8000b20 <__udivmoddi4+0x2ac>
 8000a46:	45a6      	cmp	lr, r4
 8000a48:	d96a      	bls.n	8000b20 <__udivmoddi4+0x2ac>
 8000a4a:	3b02      	subs	r3, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a52:	fba3 9502 	umull	r9, r5, r3, r2
 8000a56:	eba4 040e 	sub.w	r4, r4, lr
 8000a5a:	42ac      	cmp	r4, r5
 8000a5c:	46c8      	mov	r8, r9
 8000a5e:	46ae      	mov	lr, r5
 8000a60:	d356      	bcc.n	8000b10 <__udivmoddi4+0x29c>
 8000a62:	d053      	beq.n	8000b0c <__udivmoddi4+0x298>
 8000a64:	b156      	cbz	r6, 8000a7c <__udivmoddi4+0x208>
 8000a66:	ebb0 0208 	subs.w	r2, r0, r8
 8000a6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a72:	40ca      	lsrs	r2, r1
 8000a74:	40cc      	lsrs	r4, r1
 8000a76:	4317      	orrs	r7, r2
 8000a78:	e9c6 7400 	strd	r7, r4, [r6]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a84:	f1c3 0120 	rsb	r1, r3, #32
 8000a88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a90:	fa25 f101 	lsr.w	r1, r5, r1
 8000a94:	409d      	lsls	r5, r3
 8000a96:	432a      	orrs	r2, r5
 8000a98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9c:	fa1f fe8c 	uxth.w	lr, ip
 8000aa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa8:	0c11      	lsrs	r1, r2, #16
 8000aaa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aae:	fb00 f50e 	mul.w	r5, r0, lr
 8000ab2:	428d      	cmp	r5, r1
 8000ab4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x258>
 8000aba:	eb1c 0101 	adds.w	r1, ip, r1
 8000abe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ac2:	d22f      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac4:	428d      	cmp	r5, r1
 8000ac6:	d92d      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	4461      	add	r1, ip
 8000acc:	1b49      	subs	r1, r1, r5
 8000ace:	b292      	uxth	r2, r2
 8000ad0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ad4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000adc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ae0:	4291      	cmp	r1, r2
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x282>
 8000ae4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aec:	d216      	bcs.n	8000b1c <__udivmoddi4+0x2a8>
 8000aee:	4291      	cmp	r1, r2
 8000af0:	d914      	bls.n	8000b1c <__udivmoddi4+0x2a8>
 8000af2:	3d02      	subs	r5, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a52      	subs	r2, r2, r1
 8000af8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000afc:	e738      	b.n	8000970 <__udivmoddi4+0xfc>
 8000afe:	4631      	mov	r1, r6
 8000b00:	4630      	mov	r0, r6
 8000b02:	e708      	b.n	8000916 <__udivmoddi4+0xa2>
 8000b04:	4639      	mov	r1, r7
 8000b06:	e6e6      	b.n	80008d6 <__udivmoddi4+0x62>
 8000b08:	4610      	mov	r0, r2
 8000b0a:	e6fb      	b.n	8000904 <__udivmoddi4+0x90>
 8000b0c:	4548      	cmp	r0, r9
 8000b0e:	d2a9      	bcs.n	8000a64 <__udivmoddi4+0x1f0>
 8000b10:	ebb9 0802 	subs.w	r8, r9, r2
 8000b14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	e7a3      	b.n	8000a64 <__udivmoddi4+0x1f0>
 8000b1c:	4645      	mov	r5, r8
 8000b1e:	e7ea      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b20:	462b      	mov	r3, r5
 8000b22:	e794      	b.n	8000a4e <__udivmoddi4+0x1da>
 8000b24:	4640      	mov	r0, r8
 8000b26:	e7d1      	b.n	8000acc <__udivmoddi4+0x258>
 8000b28:	46d0      	mov	r8, sl
 8000b2a:	e77b      	b.n	8000a24 <__udivmoddi4+0x1b0>
 8000b2c:	3d02      	subs	r5, #2
 8000b2e:	4462      	add	r2, ip
 8000b30:	e732      	b.n	8000998 <__udivmoddi4+0x124>
 8000b32:	4608      	mov	r0, r1
 8000b34:	e70a      	b.n	800094c <__udivmoddi4+0xd8>
 8000b36:	4464      	add	r4, ip
 8000b38:	3802      	subs	r0, #2
 8000b3a:	e742      	b.n	80009c2 <__udivmoddi4+0x14e>

08000b3c <__aeabi_idiv0>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <BMP180_Init>:

#include "bmp180.h"


void BMP180_Init()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 1000) != HAL_OK)
 8000b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b48:	2201      	movs	r2, #1
 8000b4a:	21ee      	movs	r1, #238	; 0xee
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <BMP180_Init+0x2c>)
 8000b4e:	f001 fd05 	bl	800255c <HAL_I2C_IsDeviceReady>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d005      	beq.n	8000b64 <BMP180_Init+0x24>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <BMP180_Init+0x30>)
 8000b60:	f001 f87e 	bl	8001c60 <HAL_GPIO_WritePin>
	}

	BMP180_Get_Calibration_Value();
 8000b64:	f000 f806 	bl	8000b74 <BMP180_Get_Calibration_Value>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000078 	.word	0x20000078
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <BMP180_Get_Calibration_Value>:
float presureATM = 0;
int32_t  pX1, pX2, pX3, pB3, pB6;
uint32_t pB4, pB7;

void BMP180_Get_Calibration_Value(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af04      	add	r7, sp, #16
	int a = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]


	uint8_t calibBuff[BMP180_CALIBRATION_VALUE_LENGTH] = {0};
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	821a      	strh	r2, [r3, #16]

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, BMP180_CALIBRATION_START_ADDRESS, 1,calibBuff ,BMP180_CALIBRATION_VALUE_LENGTH, 100);
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	9302      	str	r3, [sp, #8]
 8000b96:	2316      	movs	r3, #22
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	22aa      	movs	r2, #170	; 0xaa
 8000ba2:	21ef      	movs	r1, #239	; 0xef
 8000ba4:	48a5      	ldr	r0, [pc, #660]	; (8000e3c <BMP180_Get_Calibration_Value+0x2c8>)
 8000ba6:	f001 fab3 	bl	8002110 <HAL_I2C_Mem_Read>

	AC1 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000baa:	1d3a      	adds	r2, r7, #4
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	3320      	adds	r3, #32
 8000bbc:	443b      	add	r3, r7
 8000bbe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	4b9d      	ldr	r3, [pc, #628]	; (8000e40 <BMP180_Get_Calibration_Value+0x2cc>)
 8000bca:	801a      	strh	r2, [r3, #0]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
	AC2 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000bd2:	1d3a      	adds	r2, r7, #4
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3301      	adds	r3, #1
 8000be2:	3320      	adds	r3, #32
 8000be4:	443b      	add	r3, r7
 8000be6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	4b94      	ldr	r3, [pc, #592]	; (8000e44 <BMP180_Get_Calibration_Value+0x2d0>)
 8000bf2:	801a      	strh	r2, [r3, #0]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	61fb      	str	r3, [r7, #28]
	AC3 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000bfa:	1d3a      	adds	r2, r7, #4
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	3320      	adds	r3, #32
 8000c0c:	443b      	add	r3, r7
 8000c0e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <BMP180_Get_Calibration_Value+0x2d4>)
 8000c1a:	801a      	strh	r2, [r3, #0]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	3302      	adds	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
	AC4 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000c22:	1d3a      	adds	r2, r7, #4
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3301      	adds	r3, #1
 8000c32:	3320      	adds	r3, #32
 8000c34:	443b      	add	r3, r7
 8000c36:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b82      	ldr	r3, [pc, #520]	; (8000e4c <BMP180_Get_Calibration_Value+0x2d8>)
 8000c44:	801a      	strh	r2, [r3, #0]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
	AC5 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000c4c:	1d3a      	adds	r2, r7, #4
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	3320      	adds	r3, #32
 8000c5e:	443b      	add	r3, r7
 8000c60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b78      	ldr	r3, [pc, #480]	; (8000e50 <BMP180_Get_Calibration_Value+0x2dc>)
 8000c6e:	801a      	strh	r2, [r3, #0]
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	3302      	adds	r3, #2
 8000c74:	61fb      	str	r3, [r7, #28]
	AC6 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000c76:	1d3a      	adds	r2, r7, #4
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3301      	adds	r3, #1
 8000c86:	3320      	adds	r3, #32
 8000c88:	443b      	add	r3, r7
 8000c8a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b6f      	ldr	r3, [pc, #444]	; (8000e54 <BMP180_Get_Calibration_Value+0x2e0>)
 8000c98:	801a      	strh	r2, [r3, #0]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	61fb      	str	r3, [r7, #28]
	B1 =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000ca0:	1d3a      	adds	r2, r7, #4
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	3320      	adds	r3, #32
 8000cb2:	443b      	add	r3, r7
 8000cb4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	4b66      	ldr	r3, [pc, #408]	; (8000e58 <BMP180_Get_Calibration_Value+0x2e4>)
 8000cc0:	801a      	strh	r2, [r3, #0]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
	B2 =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000cc8:	1d3a      	adds	r2, r7, #4
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	3320      	adds	r3, #32
 8000cda:	443b      	add	r3, r7
 8000cdc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	4b5d      	ldr	r3, [pc, #372]	; (8000e5c <BMP180_Get_Calibration_Value+0x2e8>)
 8000ce8:	801a      	strh	r2, [r3, #0]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3302      	adds	r3, #2
 8000cee:	61fb      	str	r3, [r7, #28]
	MB =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	3320      	adds	r3, #32
 8000d02:	443b      	add	r3, r7
 8000d04:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b54      	ldr	r3, [pc, #336]	; (8000e60 <BMP180_Get_Calibration_Value+0x2ec>)
 8000d10:	801a      	strh	r2, [r3, #0]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3302      	adds	r3, #2
 8000d16:	61fb      	str	r3, [r7, #28]
	MC =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000d18:	1d3a      	adds	r2, r7, #4
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	3301      	adds	r3, #1
 8000d28:	3320      	adds	r3, #32
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	4b4b      	ldr	r3, [pc, #300]	; (8000e64 <BMP180_Get_Calibration_Value+0x2f0>)
 8000d38:	801a      	strh	r2, [r3, #0]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	61fb      	str	r3, [r7, #28]
	MD =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8000d40:	1d3a      	adds	r2, r7, #4
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	3320      	adds	r3, #32
 8000d52:	443b      	add	r3, r7
 8000d54:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <BMP180_Get_Calibration_Value+0x2f4>)
 8000d60:	801a      	strh	r2, [r3, #0]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3302      	adds	r3, #2
 8000d66:	61fb      	str	r3, [r7, #28]

	if(AC1 == 0x0000 || AC1 == 0xFFFFF)
 8000d68:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <BMP180_Get_Calibration_Value+0x2cc>)
 8000d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d106      	bne.n	8000d80 <BMP180_Get_Calibration_Value+0x20c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d78:	483c      	ldr	r0, [pc, #240]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000d7a:	f000 ff71 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000d7e:	e7fe      	b.n	8000d7e <BMP180_Get_Calibration_Value+0x20a>
	}

	else if(AC2 == 0x0000 || AC2 == 0xFFFFF)
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <BMP180_Get_Calibration_Value+0x2d0>)
 8000d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d106      	bne.n	8000d98 <BMP180_Get_Calibration_Value+0x224>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d90:	4836      	ldr	r0, [pc, #216]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000d92:	f000 ff65 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000d96:	e7fe      	b.n	8000d96 <BMP180_Get_Calibration_Value+0x222>
	}

	else if(AC3 == 0x0000 || AC3 == 0xFFFFF)
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <BMP180_Get_Calibration_Value+0x2d4>)
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d106      	bne.n	8000db0 <BMP180_Get_Calibration_Value+0x23c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da8:	4830      	ldr	r0, [pc, #192]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000daa:	f000 ff59 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000dae:	e7fe      	b.n	8000dae <BMP180_Get_Calibration_Value+0x23a>
	}
	else if(AC4 == 0x0000 || AC4 == 0xFFFFF)
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <BMP180_Get_Calibration_Value+0x2d8>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d106      	bne.n	8000dc6 <BMP180_Get_Calibration_Value+0x252>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbe:	482b      	ldr	r0, [pc, #172]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000dc0:	f000 ff4e 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000dc4:	e7fe      	b.n	8000dc4 <BMP180_Get_Calibration_Value+0x250>
	}
	else if(AC5 == 0x0000 || AC5 == 0xFFFFF)
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <BMP180_Get_Calibration_Value+0x2dc>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d106      	bne.n	8000ddc <BMP180_Get_Calibration_Value+0x268>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd4:	4825      	ldr	r0, [pc, #148]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000dd6:	f000 ff43 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000dda:	e7fe      	b.n	8000dda <BMP180_Get_Calibration_Value+0x266>
	}
	else if(AC6 == 0x0000 || AC6 == 0xFFFFF)
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <BMP180_Get_Calibration_Value+0x2e0>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <BMP180_Get_Calibration_Value+0x27e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	4820      	ldr	r0, [pc, #128]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000dec:	f000 ff38 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000df0:	e7fe      	b.n	8000df0 <BMP180_Get_Calibration_Value+0x27c>
	}
	else if(B1 == 0x0000 || B1 == 0xFFFFF)
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <BMP180_Get_Calibration_Value+0x2e4>)
 8000df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d106      	bne.n	8000e0a <BMP180_Get_Calibration_Value+0x296>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	481a      	ldr	r0, [pc, #104]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000e04:	f000 ff2c 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000e08:	e7fe      	b.n	8000e08 <BMP180_Get_Calibration_Value+0x294>
	}
	else if(B2 == 0x0000 || B2 == 0xFFFFF)
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <BMP180_Get_Calibration_Value+0x2e8>)
 8000e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d106      	bne.n	8000e22 <BMP180_Get_Calibration_Value+0x2ae>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000e1c:	f000 ff20 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000e20:	e7fe      	b.n	8000e20 <BMP180_Get_Calibration_Value+0x2ac>
	}
	else if(MB == 0x0000 || MB == 0xFFFFF)
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <BMP180_Get_Calibration_Value+0x2ec>)
 8000e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d121      	bne.n	8000e70 <BMP180_Get_Calibration_Value+0x2fc>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <BMP180_Get_Calibration_Value+0x2f8>)
 8000e34:	f000 ff14 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000e38:	e7fe      	b.n	8000e38 <BMP180_Get_Calibration_Value+0x2c4>
 8000e3a:	bf00      	nop
 8000e3c:	20000078 	.word	0x20000078
 8000e40:	20000028 	.word	0x20000028
 8000e44:	2000002a 	.word	0x2000002a
 8000e48:	2000002c 	.word	0x2000002c
 8000e4c:	2000002e 	.word	0x2000002e
 8000e50:	20000030 	.word	0x20000030
 8000e54:	20000032 	.word	0x20000032
 8000e58:	20000034 	.word	0x20000034
 8000e5c:	20000036 	.word	0x20000036
 8000e60:	20000038 	.word	0x20000038
 8000e64:	2000003a 	.word	0x2000003a
 8000e68:	2000003c 	.word	0x2000003c
 8000e6c:	40020c00 	.word	0x40020c00
	}
	else if(MC == 0x0000 || MC == 0xFFFFF)
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <BMP180_Get_Calibration_Value+0x334>)
 8000e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d106      	bne.n	8000e88 <BMP180_Get_Calibration_Value+0x314>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <BMP180_Get_Calibration_Value+0x338>)
 8000e82:	f000 feed 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000e86:	e7fe      	b.n	8000e86 <BMP180_Get_Calibration_Value+0x312>
	}
	else if(MD == 0x0000 || MD == 0xFFFFF)
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <BMP180_Get_Calibration_Value+0x33c>)
 8000e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d106      	bne.n	8000ea0 <BMP180_Get_Calibration_Value+0x32c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <BMP180_Get_Calibration_Value+0x338>)
 8000e9a:	f000 fee1 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000e9e:	e7fe      	b.n	8000e9e <BMP180_Get_Calibration_Value+0x32a>
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000003a 	.word	0x2000003a
 8000eac:	40020c00 	.word	0x40020c00
 8000eb0:	2000003c 	.word	0x2000003c
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <BMP180_Get_Temperature>:

void BMP180_Get_Temperature(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	BMP180_GetUncomponsated_Temperature();
 8000ebc:	f000 f874 	bl	8000fa8 <BMP180_GetUncomponsated_Temperature>
	tX1 = (((int32_t)unCompTemperature - (int32_t)AC6) * (int32_t)AC5) / 32768;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <BMP180_Get_Temperature+0xc8>)
 8000ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <BMP180_Get_Temperature+0xcc>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <BMP180_Get_Temperature+0xd0>)
 8000ed0:	8812      	ldrh	r2, [r2, #0]
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	da02      	bge.n	8000ee0 <BMP180_Get_Temperature+0x28>
 8000eda:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000ede:	337f      	adds	r3, #127	; 0x7f
 8000ee0:	13db      	asrs	r3, r3, #15
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <BMP180_Get_Temperature+0xd4>)
 8000ee6:	601a      	str	r2, [r3, #0]
	tX2 = ((int32_t)MC * 2048) / (tX1 + (int32_t)MD);
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <BMP180_Get_Temperature+0xd8>)
 8000eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eee:	02da      	lsls	r2, r3, #11
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <BMP180_Get_Temperature+0xdc>)
 8000ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <BMP180_Get_Temperature+0xd4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	440b      	add	r3, r1
 8000efe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f02:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <BMP180_Get_Temperature+0xe0>)
 8000f04:	6013      	str	r3, [r2, #0]

	if(tX1 == 0 && MD == 0)
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <BMP180_Get_Temperature+0xd4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10b      	bne.n	8000f26 <BMP180_Get_Temperature+0x6e>
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <BMP180_Get_Temperature+0xdc>)
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d106      	bne.n	8000f26 <BMP180_Get_Temperature+0x6e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	481f      	ldr	r0, [pc, #124]	; (8000f9c <BMP180_Get_Temperature+0xe4>)
 8000f20:	f000 fe9e 	bl	8001c60 <HAL_GPIO_WritePin>
		while(1);
 8000f24:	e7fe      	b.n	8000f24 <BMP180_Get_Temperature+0x6c>
	}

	tB5 = tX1 + tX2;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <BMP180_Get_Temperature+0xd4>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <BMP180_Get_Temperature+0xe0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <BMP180_Get_Temperature+0xe8>)
 8000f32:	6013      	str	r3, [r2, #0]
	Temperature =(float) (tB5 + 8) / 16 * 0.1;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <BMP180_Get_Temperature+0xe8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3308      	adds	r3, #8
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f42:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000f46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f4a:	ee16 0a90 	vmov	r0, s13
 8000f4e:	f7ff fbd1 	bl	80006f4 <__aeabi_f2d>
 8000f52:	a309      	add	r3, pc, #36	; (adr r3, 8000f78 <BMP180_Get_Temperature+0xc0>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff f93e 	bl	80001d8 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fc1e 	bl	80007a4 <__aeabi_d2f>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <BMP180_Get_Temperature+0xec>)
 8000f6c:	6013      	str	r3, [r2, #0]

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	f3af 8000 	nop.w
 8000f78:	9999999a 	.word	0x9999999a
 8000f7c:	3fb99999 	.word	0x3fb99999
 8000f80:	2000003e 	.word	0x2000003e
 8000f84:	20000032 	.word	0x20000032
 8000f88:	20000030 	.word	0x20000030
 8000f8c:	20000044 	.word	0x20000044
 8000f90:	2000003a 	.word	0x2000003a
 8000f94:	2000003c 	.word	0x2000003c
 8000f98:	20000048 	.word	0x20000048
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	2000004c 	.word	0x2000004c
 8000fa4:	20000040 	.word	0x20000040

08000fa8 <BMP180_GetUncomponsated_Temperature>:

void BMP180_GetUncomponsated_Temperature(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af04      	add	r7, sp, #16
	uint8_t rData[2] = {0};
 8000fae:	2300      	movs	r3, #0
 8000fb0:	80bb      	strh	r3, [r7, #4]
	uint8_t wData[1];
	wData[0] = 0x2E;
 8000fb2:	232e      	movs	r3, #46	; 0x2e
 8000fb4:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100);
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	22f4      	movs	r2, #244	; 0xf4
 8000fc6:	21ee      	movs	r1, #238	; 0xee
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <BMP180_GetUncomponsated_Temperature+0x60>)
 8000fca:	f000 ffa7 	bl	8001f1c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000fce:	2005      	movs	r0, #5
 8000fd0:	f000 fbb8 	bl	8001744 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 2, 100);
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2302      	movs	r3, #2
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	22f6      	movs	r2, #246	; 0xf6
 8000fe4:	21ef      	movs	r1, #239	; 0xef
 8000fe6:	4808      	ldr	r0, [pc, #32]	; (8001008 <BMP180_GetUncomponsated_Temperature+0x60>)
 8000fe8:	f001 f892 	bl	8002110 <HAL_I2C_Mem_Read>
	unCompTemperature = (int16_t)((rData[0] << 8) | rData[1]);
 8000fec:	793b      	ldrb	r3, [r7, #4]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	797b      	ldrb	r3, [r7, #5]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <BMP180_GetUncomponsated_Temperature+0x64>)
 8000ffc:	801a      	strh	r2, [r3, #0]

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000078 	.word	0x20000078
 800100c:	2000003e 	.word	0x2000003e

08001010 <BMP180_GetPresure>:



void BMP180_GetPresure(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP180_GetUncomponsated_Presure();
 8001014:	f000 f94a 	bl	80012ac <BMP180_GetUncomponsated_Presure>

	pB6 = tB5 - 4000;
 8001018:	4b8f      	ldr	r3, [pc, #572]	; (8001258 <BMP180_GetPresure+0x248>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001020:	4a8e      	ldr	r2, [pc, #568]	; (800125c <BMP180_GetPresure+0x24c>)
 8001022:	6013      	str	r3, [r2, #0]
	pX1 = (B2 *(pB6 * pB6 / 4096)) / 2048;
 8001024:	4b8e      	ldr	r3, [pc, #568]	; (8001260 <BMP180_GetPresure+0x250>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	4619      	mov	r1, r3
 800102c:	4b8b      	ldr	r3, [pc, #556]	; (800125c <BMP180_GetPresure+0x24c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a8a      	ldr	r2, [pc, #552]	; (800125c <BMP180_GetPresure+0x24c>)
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	fb02 f303 	mul.w	r3, r2, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	da01      	bge.n	8001040 <BMP180_GetPresure+0x30>
 800103c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001040:	131b      	asrs	r3, r3, #12
 8001042:	fb01 f303 	mul.w	r3, r1, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	da01      	bge.n	800104e <BMP180_GetPresure+0x3e>
 800104a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800104e:	12db      	asrs	r3, r3, #11
 8001050:	461a      	mov	r2, r3
 8001052:	4b84      	ldr	r3, [pc, #528]	; (8001264 <BMP180_GetPresure+0x254>)
 8001054:	601a      	str	r2, [r3, #0]
	pX2 = AC2 * pB6 / 2048;
 8001056:	4b84      	ldr	r3, [pc, #528]	; (8001268 <BMP180_GetPresure+0x258>)
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	461a      	mov	r2, r3
 800105e:	4b7f      	ldr	r3, [pc, #508]	; (800125c <BMP180_GetPresure+0x24c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	fb02 f303 	mul.w	r3, r2, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	da01      	bge.n	800106e <BMP180_GetPresure+0x5e>
 800106a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800106e:	12db      	asrs	r3, r3, #11
 8001070:	461a      	mov	r2, r3
 8001072:	4b7e      	ldr	r3, [pc, #504]	; (800126c <BMP180_GetPresure+0x25c>)
 8001074:	601a      	str	r2, [r3, #0]
	pX3 = pX1 + pX2;
 8001076:	4b7b      	ldr	r3, [pc, #492]	; (8001264 <BMP180_GetPresure+0x254>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b7c      	ldr	r3, [pc, #496]	; (800126c <BMP180_GetPresure+0x25c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a7b      	ldr	r2, [pc, #492]	; (8001270 <BMP180_GetPresure+0x260>)
 8001082:	6013      	str	r3, [r2, #0]
	pB3 = (((AC1 * 4 + pX3) << (uint8_t)0x03) + 2) / 4;
 8001084:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <BMP180_GetPresure+0x264>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	009a      	lsls	r2, r3, #2
 800108c:	4b78      	ldr	r3, [pc, #480]	; (8001270 <BMP180_GetPresure+0x260>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	3302      	adds	r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	da00      	bge.n	800109c <BMP180_GetPresure+0x8c>
 800109a:	3303      	adds	r3, #3
 800109c:	109b      	asrs	r3, r3, #2
 800109e:	461a      	mov	r2, r3
 80010a0:	4b75      	ldr	r3, [pc, #468]	; (8001278 <BMP180_GetPresure+0x268>)
 80010a2:	601a      	str	r2, [r3, #0]
	pX1 = AC3 * pB6 / 8192;
 80010a4:	4b75      	ldr	r3, [pc, #468]	; (800127c <BMP180_GetPresure+0x26c>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b6b      	ldr	r3, [pc, #428]	; (800125c <BMP180_GetPresure+0x24c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da02      	bge.n	80010be <BMP180_GetPresure+0xae>
 80010b8:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80010bc:	331f      	adds	r3, #31
 80010be:	135b      	asrs	r3, r3, #13
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b68      	ldr	r3, [pc, #416]	; (8001264 <BMP180_GetPresure+0x254>)
 80010c4:	601a      	str	r2, [r3, #0]
	pX2 = (B1 * (pB6 * pB6 / 4096)) / 65536;
 80010c6:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <BMP180_GetPresure+0x270>)
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <BMP180_GetPresure+0x24c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a62      	ldr	r2, [pc, #392]	; (800125c <BMP180_GetPresure+0x24c>)
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da01      	bge.n	80010e2 <BMP180_GetPresure+0xd2>
 80010de:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80010e2:	131b      	asrs	r3, r3, #12
 80010e4:	fb01 f303 	mul.w	r3, r1, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da02      	bge.n	80010f2 <BMP180_GetPresure+0xe2>
 80010ec:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80010f0:	33ff      	adds	r3, #255	; 0xff
 80010f2:	141b      	asrs	r3, r3, #16
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b5d      	ldr	r3, [pc, #372]	; (800126c <BMP180_GetPresure+0x25c>)
 80010f8:	601a      	str	r2, [r3, #0]
	pX3 = ((pX1 + pX2) + 2) / 4;
 80010fa:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <BMP180_GetPresure+0x254>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <BMP180_GetPresure+0x25c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	3302      	adds	r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	da00      	bge.n	800110c <BMP180_GetPresure+0xfc>
 800110a:	3303      	adds	r3, #3
 800110c:	109b      	asrs	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	4b57      	ldr	r3, [pc, #348]	; (8001270 <BMP180_GetPresure+0x260>)
 8001112:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (unsigned long) (pX3 + 32768) / 32768;
 8001114:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <BMP180_GetPresure+0x274>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b55      	ldr	r3, [pc, #340]	; (8001270 <BMP180_GetPresure+0x260>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	0bdb      	lsrs	r3, r3, #15
 8001128:	4a57      	ldr	r2, [pc, #348]	; (8001288 <BMP180_GetPresure+0x278>)
 800112a:	6013      	str	r3, [r2, #0]
	pB7 = ((unsigned long)unCompPresure - pB3) * (50000 >> (uint8_t)0x03);
 800112c:	4b57      	ldr	r3, [pc, #348]	; (800128c <BMP180_GetPresure+0x27c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a51      	ldr	r2, [pc, #324]	; (8001278 <BMP180_GetPresure+0x268>)
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	f641 026a 	movw	r2, #6250	; 0x186a
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	4a54      	ldr	r2, [pc, #336]	; (8001290 <BMP180_GetPresure+0x280>)
 8001140:	6013      	str	r3, [r2, #0]

	if(pB7 < 80000000)
 8001142:	4b53      	ldr	r3, [pc, #332]	; (8001290 <BMP180_GetPresure+0x280>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a53      	ldr	r2, [pc, #332]	; (8001294 <BMP180_GetPresure+0x284>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d80e      	bhi.n	800116a <BMP180_GetPresure+0x15a>
		presure = (pB7 * 2) /pB4;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <BMP180_GetPresure+0x280>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	005a      	lsls	r2, r3, #1
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <BMP180_GetPresure+0x278>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001162:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <BMP180_GetPresure+0x288>)
 8001164:	edc3 7a00 	vstr	s15, [r3]
 8001168:	e00d      	b.n	8001186 <BMP180_GetPresure+0x176>
	else
		presure = (pB7 / pB4) * 2;
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <BMP180_GetPresure+0x280>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <BMP180_GetPresure+0x278>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001180:	4b45      	ldr	r3, [pc, #276]	; (8001298 <BMP180_GetPresure+0x288>)
 8001182:	edc3 7a00 	vstr	s15, [r3]

	pX1 = (presure / 256) * (presure / 256);
 8001186:	4b44      	ldr	r3, [pc, #272]	; (8001298 <BMP180_GetPresure+0x288>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eddf 6a43 	vldr	s13, [pc, #268]	; 800129c <BMP180_GetPresure+0x28c>
 8001190:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <BMP180_GetPresure+0x288>)
 8001196:	edd3 6a00 	vldr	s13, [r3]
 800119a:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800129c <BMP180_GetPresure+0x28c>
 800119e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	ee17 2a90 	vmov	r2, s15
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <BMP180_GetPresure+0x254>)
 80011b0:	601a      	str	r2, [r3, #0]
	pX1 = (pX1 * 3038) / 65536;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <BMP180_GetPresure+0x254>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f640 32de 	movw	r2, #3038	; 0xbde
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	da02      	bge.n	80011c8 <BMP180_GetPresure+0x1b8>
 80011c2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011c6:	33ff      	adds	r3, #255	; 0xff
 80011c8:	141b      	asrs	r3, r3, #16
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <BMP180_GetPresure+0x254>)
 80011ce:	601a      	str	r2, [r3, #0]
	pX2 = (-7357 * presure ) / 65536;
 80011d0:	4b31      	ldr	r3, [pc, #196]	; (8001298 <BMP180_GetPresure+0x288>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80012a0 <BMP180_GetPresure+0x290>
 80011da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011de:	eddf 6a31 	vldr	s13, [pc, #196]	; 80012a4 <BMP180_GetPresure+0x294>
 80011e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ea:	ee17 2a90 	vmov	r2, s15
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <BMP180_GetPresure+0x25c>)
 80011f0:	601a      	str	r2, [r3, #0]
	presure = presure + (pX1 + pX2 + 3791) / 16;   //hPa
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <BMP180_GetPresure+0x254>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <BMP180_GetPresure+0x25c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001200:	2b00      	cmp	r3, #0
 8001202:	da00      	bge.n	8001206 <BMP180_GetPresure+0x1f6>
 8001204:	330f      	adds	r3, #15
 8001206:	111b      	asrs	r3, r3, #4
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <BMP180_GetPresure+0x288>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <BMP180_GetPresure+0x288>)
 800121c:	edc3 7a00 	vstr	s15, [r3]
	presureATM = presure * 0.00000986923;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <BMP180_GetPresure+0x288>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fa65 	bl	80006f4 <__aeabi_f2d>
 800122a:	a309      	add	r3, pc, #36	; (adr r3, 8001250 <BMP180_GetPresure+0x240>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7fe ffd2 	bl	80001d8 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fab2 	bl	80007a4 <__aeabi_d2f>
 8001240:	4603      	mov	r3, r0
 8001242:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <BMP180_GetPresure+0x298>)
 8001244:	6013      	str	r3, [r2, #0]

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	f3af 8000 	nop.w
 8001250:	a48cde11 	.word	0xa48cde11
 8001254:	3ee4b280 	.word	0x3ee4b280
 8001258:	2000004c 	.word	0x2000004c
 800125c:	2000006c 	.word	0x2000006c
 8001260:	20000036 	.word	0x20000036
 8001264:	2000005c 	.word	0x2000005c
 8001268:	2000002a 	.word	0x2000002a
 800126c:	20000060 	.word	0x20000060
 8001270:	20000064 	.word	0x20000064
 8001274:	20000028 	.word	0x20000028
 8001278:	20000068 	.word	0x20000068
 800127c:	2000002c 	.word	0x2000002c
 8001280:	20000034 	.word	0x20000034
 8001284:	2000002e 	.word	0x2000002e
 8001288:	20000070 	.word	0x20000070
 800128c:	20000050 	.word	0x20000050
 8001290:	20000074 	.word	0x20000074
 8001294:	04c4b3ff 	.word	0x04c4b3ff
 8001298:	20000054 	.word	0x20000054
 800129c:	43800000 	.word	0x43800000
 80012a0:	c5e5e800 	.word	0xc5e5e800
 80012a4:	47800000 	.word	0x47800000
 80012a8:	20000058 	.word	0x20000058

080012ac <BMP180_GetUncomponsated_Presure>:


void BMP180_GetUncomponsated_Presure(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af04      	add	r7, sp, #16
	uint8_t wData[1];
	uint8_t rData[3] = {0};
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <BMP180_GetUncomponsated_Presure+0x68>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	803b      	strh	r3, [r7, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	70bb      	strb	r3, [r7, #2]
	wData[0] = 0x34 | (0x03 << 6);
 80012bc:	23f4      	movs	r3, #244	; 0xf4
 80012be:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100);
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	22f4      	movs	r2, #244	; 0xf4
 80012d0:	21ee      	movs	r1, #238	; 0xee
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <BMP180_GetUncomponsated_Presure+0x6c>)
 80012d4:	f000 fe22 	bl	8001f1c <HAL_I2C_Mem_Write>
	HAL_Delay(26);
 80012d8:	201a      	movs	r0, #26
 80012da:	f000 fa33 	bl	8001744 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 3, 100);
 80012de:	2364      	movs	r3, #100	; 0x64
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2303      	movs	r3, #3
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	463b      	mov	r3, r7
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	22f6      	movs	r2, #246	; 0xf6
 80012ee:	21ef      	movs	r1, #239	; 0xef
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <BMP180_GetUncomponsated_Presure+0x6c>)
 80012f2:	f000 ff0d 	bl	8002110 <HAL_I2C_Mem_Read>
	unCompPresure =(rData[0] << 16 | rData[1] << 8 | rData[2]) >> (8 - (uint8_t)(0x03));
 80012f6:	783b      	ldrb	r3, [r7, #0]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	787b      	ldrb	r3, [r7, #1]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4313      	orrs	r3, r2
 8001300:	78ba      	ldrb	r2, [r7, #2]
 8001302:	4313      	orrs	r3, r2
 8001304:	115b      	asrs	r3, r3, #5
 8001306:	461a      	mov	r2, r3
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <BMP180_GetUncomponsated_Presure+0x70>)
 800130a:	601a      	str	r2, [r3, #0]


}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	08003768 	.word	0x08003768
 8001318:	20000078 	.word	0x20000078
 800131c:	20000050 	.word	0x20000050

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 f99c 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f80c 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f8a2 	bl	8001474 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001330:	f000 f872 	bl	8001418 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Init();
 8001334:	f7ff fc04 	bl	8000b40 <BMP180_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP180_Get_Temperature();
 8001338:	f7ff fdbe 	bl	8000eb8 <BMP180_Get_Temperature>
	  BMP180_GetPresure();
 800133c:	f7ff fe68 	bl	8001010 <BMP180_GetPresure>
	  BMP180_Get_Temperature();
 8001340:	e7fa      	b.n	8001338 <main+0x18>
	...

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f002 f9d0 	bl	80036f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <SystemClock_Config+0xcc>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <SystemClock_Config+0xcc>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <SystemClock_Config+0xcc>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <SystemClock_Config+0xd0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001390:	4a20      	ldr	r2, [pc, #128]	; (8001414 <SystemClock_Config+0xd0>)
 8001392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ac:	2310      	movs	r3, #16
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b0:	2302      	movs	r3, #2
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b8:	2308      	movs	r3, #8
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80013bc:	2354      	movs	r3, #84	; 0x54
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c4:	2304      	movs	r3, #4
 80013c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fd4f 	bl	8002e70 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013d8:	f000 f866 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2102      	movs	r1, #2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 ffb1 	bl	8003360 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001404:	f000 f850 	bl	80014a8 <Error_Handler>
  }
}
 8001408:	bf00      	nop
 800140a:	3750      	adds	r7, #80	; 0x50
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C1_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C1_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C1_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C1_Init+0x50>)
 8001456:	f000 fc1d 	bl	8001c94 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 f822 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000078 	.word	0x20000078
 800146c:	40005400 	.word	0x40005400
 8001470:	000186a0 	.word	0x000186a0

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_GPIO_Init+0x30>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <MX_GPIO_Init+0x30>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_GPIO_Init+0x30>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_MspInit+0x4c>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_MspInit+0x4c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_I2C_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12b      	bne.n	800157e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_I2C_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001542:	23c0      	movs	r3, #192	; 0xc0
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001546:	2312      	movs	r3, #18
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001552:	2304      	movs	r3, #4
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_I2C_MspInit+0x8c>)
 800155e:	f000 f9fb 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_I2C_MspInit+0x88>)
 800156c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40005400 	.word	0x40005400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020400 	.word	0x40020400

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 f890 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001612:	490e      	ldr	r1, [pc, #56]	; (800164c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001628:	4c0b      	ldr	r4, [pc, #44]	; (8001658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001636:	f7ff ffd7 	bl	80015e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f002 f865 	bl	8003708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff fe6f 	bl	8001320 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001644:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001650:	08003794 	.word	0x08003794
  ldr r2, =_sbss
 8001654:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001658:	200000d0 	.word	0x200000d0

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_Init+0x40>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_Init+0x40>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x40>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f931 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	200f      	movs	r0, #15
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff ff0e 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f93b 	bl	800193e <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 f911 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	200000cc 	.word	0x200000cc

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200000cc 	.word	0x200000cc

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff47 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff5c 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffb0 	bl	80018ac <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e159      	b.n	8001c28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8148 	bne.w	8001c22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d005      	beq.n	80019aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80a2 	beq.w	8001c22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afa:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_GPIO_Init+0x2ec>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <HAL_GPIO_Init+0x202>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_GPIO_Init+0x2f4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0x1fe>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a47      	ldr	r2, [pc, #284]	; (8001c50 <HAL_GPIO_Init+0x2f8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00d      	beq.n	8001b52 <HAL_GPIO_Init+0x1fa>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a46      	ldr	r2, [pc, #280]	; (8001c54 <HAL_GPIO_Init+0x2fc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_Init+0x1f6>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a45      	ldr	r2, [pc, #276]	; (8001c58 <HAL_GPIO_Init+0x300>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_GPIO_Init+0x1f2>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <HAL_GPIO_Init+0x2ec>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7a:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc8:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf2:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1c:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f aea2 	bls.w	8001974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40013c00 	.word	0x40013c00

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c7c:	e003      	b.n	8001c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e12b      	b.n	8001efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fc22 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f001 fcea 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a81      	ldr	r2, [pc, #516]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d807      	bhi.n	8001d18 <HAL_I2C_Init+0x84>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4a80      	ldr	r2, [pc, #512]	; (8001f0c <HAL_I2C_Init+0x278>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	bf94      	ite	ls
 8001d10:	2301      	movls	r3, #1
 8001d12:	2300      	movhi	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e006      	b.n	8001d26 <HAL_I2C_Init+0x92>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a7d      	ldr	r2, [pc, #500]	; (8001f10 <HAL_I2C_Init+0x27c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0e7      	b.n	8001efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a78      	ldr	r2, [pc, #480]	; (8001f14 <HAL_I2C_Init+0x280>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9b      	lsrs	r3, r3, #18
 8001d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d802      	bhi.n	8001d68 <HAL_I2C_Init+0xd4>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	e009      	b.n	8001d7c <HAL_I2C_Init+0xe8>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a69      	ldr	r2, [pc, #420]	; (8001f18 <HAL_I2C_Init+0x284>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	495c      	ldr	r1, [pc, #368]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d98:	428b      	cmp	r3, r1
 8001d9a:	d819      	bhi.n	8001dd0 <HAL_I2C_Init+0x13c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e59      	subs	r1, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001daa:	1c59      	adds	r1, r3, #1
 8001dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001db0:	400b      	ands	r3, r1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_I2C_Init+0x138>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e59      	subs	r1, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dca:	e051      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e04f      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d111      	bne.n	8001dfc <HAL_I2C_Init+0x168>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1e58      	subs	r0, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	440b      	add	r3, r1
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e012      	b.n	8001e22 <HAL_I2C_Init+0x18e>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e58      	subs	r0, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	0099      	lsls	r1, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Init+0x196>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e022      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10e      	bne.n	8001e50 <HAL_I2C_Init+0x1bc>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e58      	subs	r0, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6859      	ldr	r1, [r3, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	440b      	add	r3, r1
 8001e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4e:	e00f      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	0099      	lsls	r1, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	6809      	ldr	r1, [r1, #0]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6911      	ldr	r1, [r2, #16]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68d2      	ldr	r2, [r2, #12]
 8001eaa:	4311      	orrs	r1, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	000186a0 	.word	0x000186a0
 8001f0c:	001e847f 	.word	0x001e847f
 8001f10:	003d08ff 	.word	0x003d08ff
 8001f14:	431bde83 	.word	0x431bde83
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	817b      	strh	r3, [r7, #10]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	813b      	strh	r3, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f36:	f7ff fbf9 	bl	800172c <HAL_GetTick>
 8001f3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	f040 80d9 	bne.w	80020fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2319      	movs	r3, #25
 8001f50:	2201      	movs	r2, #1
 8001f52:	496d      	ldr	r1, [pc, #436]	; (8002108 <HAL_I2C_Mem_Write+0x1ec>)
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fdad 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
 8001f62:	e0cc      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Mem_Write+0x56>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0c5      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d007      	beq.n	8001f98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2221      	movs	r2, #33	; 0x21
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a4d      	ldr	r2, [pc, #308]	; (800210c <HAL_I2C_Mem_Write+0x1f0>)
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fda:	88f8      	ldrh	r0, [r7, #6]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	8979      	ldrh	r1, [r7, #10]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fbe4 	bl	80027b8 <I2C_RequestMemoryWrite>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d052      	beq.n	800209c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e081      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fe2e 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b04      	cmp	r3, #4
 8002010:	d107      	bne.n	8002022 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002020:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06b      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d11b      	bne.n	800209c <HAL_I2C_Mem_Write+0x180>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1aa      	bne.n	8001ffa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fe1a 	bl	8002ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d107      	bne.n	80020cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e016      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	00100002 	.word	0x00100002
 800210c:	ffff0000 	.word	0xffff0000

08002110 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4603      	mov	r3, r0
 8002120:	817b      	strh	r3, [r7, #10]
 8002122:	460b      	mov	r3, r1
 8002124:	813b      	strh	r3, [r7, #8]
 8002126:	4613      	mov	r3, r2
 8002128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800212a:	f7ff faff 	bl	800172c <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b20      	cmp	r3, #32
 800213a:	f040 8208 	bne.w	800254e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2319      	movs	r3, #25
 8002144:	2201      	movs	r2, #1
 8002146:	497b      	ldr	r1, [pc, #492]	; (8002334 <HAL_I2C_Mem_Read+0x224>)
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fcb3 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
 8002156:	e1fb      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Mem_Read+0x56>
 8002162:	2302      	movs	r3, #2
 8002164:	e1f4      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d007      	beq.n	800218c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2222      	movs	r2, #34	; 0x22
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a5b      	ldr	r2, [pc, #364]	; (8002338 <HAL_I2C_Mem_Read+0x228>)
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ce:	88f8      	ldrh	r0, [r7, #6]
 80021d0:	893a      	ldrh	r2, [r7, #8]
 80021d2:	8979      	ldrh	r1, [r7, #10]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4603      	mov	r3, r0
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fb80 	bl	80028e4 <I2C_RequestMemoryRead>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1b0      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d113      	bne.n	800221e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e184      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b01      	cmp	r3, #1
 8002224:	d11b      	bne.n	800225e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e164      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b02      	cmp	r3, #2
 8002264:	d11b      	bne.n	800229e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	e144      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022b4:	e138      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80f1 	bhi.w	80024a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d123      	bne.n	8002310 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fd49 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e139      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800230e:	e10b      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	2b02      	cmp	r3, #2
 8002316:	d14e      	bne.n	80023b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	2200      	movs	r2, #0
 8002320:	4906      	ldr	r1, [pc, #24]	; (800233c <HAL_I2C_Mem_Read+0x22c>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fbc6 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e10e      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
 8002332:	bf00      	nop
 8002334:	00100002 	.word	0x00100002
 8002338:	ffff0000 	.word	0xffff0000
 800233c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023b4:	e0b8      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	2200      	movs	r2, #0
 80023be:	4966      	ldr	r1, [pc, #408]	; (8002558 <HAL_I2C_Mem_Read+0x448>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fb77 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0bf      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2200      	movs	r2, #0
 800241a:	494f      	ldr	r1, [pc, #316]	; (8002558 <HAL_I2C_Mem_Read+0x448>)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fb49 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e091      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a0:	e042      	b.n	8002528 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fc5c 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e04c      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d118      	bne.n	8002528 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f aec2 	bne.w	80022b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	00010004 	.word	0x00010004

0800255c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	460b      	mov	r3, r1
 800256a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff f8de 	bl	800172c <HAL_GetTick>
 8002570:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b20      	cmp	r3, #32
 8002580:	f040 8111 	bne.w	80027a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2319      	movs	r3, #25
 800258a:	2201      	movs	r2, #1
 800258c:	4988      	ldr	r1, [pc, #544]	; (80027b0 <HAL_I2C_IsDeviceReady+0x254>)
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fa90 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	e104      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_I2C_IsDeviceReady+0x50>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0fd      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d007      	beq.n	80025d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2224      	movs	r2, #36	; 0x24
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a70      	ldr	r2, [pc, #448]	; (80027b4 <HAL_I2C_IsDeviceReady+0x258>)
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002604:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2200      	movs	r2, #0
 800260e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fa4e 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262c:	d103      	bne.n	8002636 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0b6      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002648:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800264a:	f7ff f86f 	bl	800172c <HAL_GetTick>
 800264e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800267e:	e025      	b.n	80026cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002680:	f7ff f854 	bl	800172c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d302      	bcc.n	8002696 <HAL_I2C_IsDeviceReady+0x13a>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	22a0      	movs	r2, #160	; 0xa0
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2ba0      	cmp	r3, #160	; 0xa0
 80026d6:	d005      	beq.n	80026e4 <HAL_I2C_IsDeviceReady+0x188>
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_I2C_IsDeviceReady+0x188>
 80026de:	7dbb      	ldrb	r3, [r7, #22]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0cd      	beq.n	8002680 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d129      	bne.n	800274e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002708:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2319      	movs	r3, #25
 8002726:	2201      	movs	r2, #1
 8002728:	4921      	ldr	r1, [pc, #132]	; (80027b0 <HAL_I2C_IsDeviceReady+0x254>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f9c2 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e036      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e02c      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002766:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2319      	movs	r3, #25
 800276e:	2201      	movs	r2, #1
 8002770:	490f      	ldr	r1, [pc, #60]	; (80027b0 <HAL_I2C_IsDeviceReady+0x254>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f99e 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e012      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	3301      	adds	r3, #1
 8002786:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	f4ff af32 	bcc.w	80025f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	00100002 	.word	0x00100002
 80027b4:	ffff0000 	.word	0xffff0000

080027b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	460b      	mov	r3, r1
 80027cc:	813b      	strh	r3, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f960 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002808:	d103      	bne.n	8002812 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e05f      	b.n	80028d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002824:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	492d      	ldr	r1, [pc, #180]	; (80028e0 <I2C_RequestMemoryWrite+0x128>)
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f998 	bl	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e04c      	b.n	80028d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002854:	6a39      	ldr	r1, [r7, #32]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fa02 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	2b04      	cmp	r3, #4
 8002868:	d107      	bne.n	800287a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002878:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e02b      	b.n	80028d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	e021      	b.n	80028d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002890:	893b      	ldrh	r3, [r7, #8]
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	b29b      	uxth	r3, r3
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	6a39      	ldr	r1, [r7, #32]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f9dc 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d107      	bne.n	80028c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e005      	b.n	80028d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ca:	893b      	ldrh	r3, [r7, #8]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	00010002 	.word	0x00010002

080028e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	460b      	mov	r3, r1
 80028f8:	813b      	strh	r3, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800290c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2200      	movs	r2, #0
 8002926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f8c2 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002944:	d103      	bne.n	800294e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0aa      	b.n	8002aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002952:	897b      	ldrh	r3, [r7, #10]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002960:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	4952      	ldr	r1, [pc, #328]	; (8002ab0 <I2C_RequestMemoryRead+0x1cc>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f8fa 	bl	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e097      	b.n	8002aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	6a39      	ldr	r1, [r7, #32]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f964 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d107      	bne.n	80029b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e076      	b.n	8002aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d105      	bne.n	80029cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c0:	893b      	ldrh	r3, [r7, #8]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	611a      	str	r2, [r3, #16]
 80029ca:	e021      	b.n	8002a10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029cc:	893b      	ldrh	r3, [r7, #8]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	6a39      	ldr	r1, [r7, #32]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f93e 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d107      	bne.n	8002a02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e050      	b.n	8002aa8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a06:	893b      	ldrh	r3, [r7, #8]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a12:	6a39      	ldr	r1, [r7, #32]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f923 	bl	8002c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d107      	bne.n	8002a38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e035      	b.n	8002aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f82b 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a72:	d103      	bne.n	8002a7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e013      	b.n	8002aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	6a3a      	ldr	r2, [r7, #32]
 8002a94:	4906      	ldr	r1, [pc, #24]	; (8002ab0 <I2C_RequestMemoryRead+0x1cc>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f863 	bl	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	00010002 	.word	0x00010002

08002ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	e025      	b.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d021      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ace:	f7fe fe2d 	bl	800172c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d302      	bcc.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d116      	bne.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e023      	b.n	8002b5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10d      	bne.n	8002b38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	e00c      	b.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d0b6      	beq.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b70:	e051      	b.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b80:	d123      	bne.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0204 	orr.w	r2, r3, #4
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e046      	b.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d021      	beq.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd2:	f7fe fdab 	bl	800172c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e020      	b.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10c      	bne.n	8002c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	e00b      	b.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d18d      	bne.n	8002b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6c:	e02d      	b.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f8ce 	bl	8002e10 <I2C_IsAcknowledgeFailed>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e02d      	b.n	8002cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d021      	beq.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fd51 	bl	800172c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d116      	bne.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e007      	b.n	8002cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d1ca      	bne.n	8002c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cee:	e02d      	b.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f88d 	bl	8002e10 <I2C_IsAcknowledgeFailed>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e02d      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d06:	d021      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d08:	f7fe fd10 	bl	800172c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d302      	bcc.n	8002d1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e007      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d1ca      	bne.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d70:	e042      	b.n	8002df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d119      	bne.n	8002db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0210 	mvn.w	r2, #16
 8002d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e029      	b.n	8002e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db4:	f7fe fcba 	bl	800172c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d116      	bne.n	8002df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e007      	b.n	8002e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d1b5      	bne.n	8002d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e26:	d11b      	bne.n	8002e60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f043 0204 	orr.w	r2, r3, #4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e267      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d075      	beq.n	8002f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8e:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b82      	ldr	r3, [pc, #520]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x108>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d157      	bne.n	8002f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e242      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x74>
 8002ed6:	4b76      	ldr	r3, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a75      	ldr	r2, [pc, #468]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b70      	ldr	r3, [pc, #448]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6f      	ldr	r2, [pc, #444]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6c      	ldr	r2, [pc, #432]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002f08:	4b69      	ldr	r3, [pc, #420]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a68      	ldr	r2, [pc, #416]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b66      	ldr	r3, [pc, #408]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fc00 	bl	800172c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fbfc 	bl	800172c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e207      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b5b      	ldr	r3, [pc, #364]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fbec 	bl	800172c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fbe8 	bl	800172c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1f3      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0xe8>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f86:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b44      	ldr	r3, [pc, #272]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c7      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4937      	ldr	r1, [pc, #220]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	e03a      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_OscConfig+0x244>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fba1 	bl	800172c <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fe fb9d 	bl	800172c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1a8      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4925      	ldr	r1, [pc, #148]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_OscConfig+0x244>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fb80 	bl	800172c <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe fb7c 	bl	800172c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e187      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d036      	beq.n	80030c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fe fb60 	bl	800172c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe fb5c 	bl	800172c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e167      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x200>
 800308e:	e01b      	b.n	80030c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe fb49 	bl	800172c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	e00e      	b.n	80030bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe fb45 	bl	800172c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d907      	bls.n	80030bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e150      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	42470000 	.word	0x42470000
 80030b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ea      	bne.n	800309e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8097 	beq.w	8003204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b7d      	ldr	r3, [pc, #500]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a7c      	ldr	r2, [pc, #496]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b7a      	ldr	r3, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003112:	4b74      	ldr	r3, [pc, #464]	; (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a73      	ldr	r2, [pc, #460]	; (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311e:	f7fe fb05 	bl	800172c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7fe fb01 	bl	800172c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e10c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_OscConfig+0x474>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x2ea>
 800314c:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x30c>
 8003162:	4b5f      	ldr	r3, [pc, #380]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a5e      	ldr	r2, [pc, #376]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	4b5c      	ldr	r3, [pc, #368]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a5b      	ldr	r2, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800317c:	4b58      	ldr	r3, [pc, #352]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a57      	ldr	r2, [pc, #348]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
 8003188:	4b55      	ldr	r3, [pc, #340]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a54      	ldr	r2, [pc, #336]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0304 	bic.w	r3, r3, #4
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe fac6 	bl	800172c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fe fac2 	bl	800172c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0cb      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ee      	beq.n	80031a4 <HAL_RCC_OscConfig+0x334>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fe fab0 	bl	800172c <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe faac 	bl	800172c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0b5      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f8:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	4a38      	ldr	r2, [pc, #224]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a1 	beq.w	8003350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320e:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b08      	cmp	r3, #8
 8003218:	d05c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d141      	bne.n	80032a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCC_OscConfig+0x478>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe fa80 	bl	800172c <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe fa7c 	bl	800172c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e087      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	019b      	lsls	r3, r3, #6
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	3b01      	subs	r3, #1
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	491b      	ldr	r1, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_OscConfig+0x478>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fa55 	bl	800172c <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fa51 	bl	800172c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e05c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x416>
 80032a4:	e054      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_RCC_OscConfig+0x478>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe fa3e 	bl	800172c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fa3a 	bl	800172c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e045      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
 80032d2:	e03d      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e038      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x4ec>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d028      	beq.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d121      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d11a      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	4293      	cmp	r3, r2
 8003326:	d111      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cc      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d90c      	bls.n	800339c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e067      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4934      	ldr	r1, [pc, #208]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fe f96c 	bl	800172c <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fe f968 	bl	800172c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d20c      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe f8cc 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023c00 	.word	0x40023c00
 800351c:	40023800 	.word	0x40023800
 8003520:	0800376c 	.word	0x0800376c
 8003524:	20000000 	.word	0x20000000
 8003528:	20000004 	.word	0x20000004

0800352c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b090      	sub	sp, #64	; 0x40
 8003532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
 8003538:	2300      	movs	r3, #0
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800353c:	2300      	movs	r3, #0
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d00d      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x40>
 8003550:	2b08      	cmp	r3, #8
 8003552:	f200 80a1 	bhi.w	8003698 <HAL_RCC_GetSysClockFreq+0x16c>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x34>
 800355a:	2b04      	cmp	r3, #4
 800355c:	d003      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x3a>
 800355e:	e09b      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003564:	e09b      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003566:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800356a:	e098      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800356c:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003576:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003582:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	099b      	lsrs	r3, r3, #6
 8003588:	2200      	movs	r2, #0
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	627a      	str	r2, [r7, #36]	; 0x24
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003594:	2100      	movs	r1, #0
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003598:	fb03 f201 	mul.w	r2, r3, r1
 800359c:	2300      	movs	r3, #0
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	4a43      	ldr	r2, [pc, #268]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035a6:	fba0 1202 	umull	r1, r2, r0, r2
 80035aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ac:	460a      	mov	r2, r1
 80035ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80035b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b2:	4413      	add	r3, r2
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b8:	2200      	movs	r2, #0
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	61fa      	str	r2, [r7, #28]
 80035be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035c6:	f7fd f93d 	bl	8000844 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4613      	mov	r3, r2
 80035d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d2:	e053      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d4:	4b35      	ldr	r3, [pc, #212]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	099b      	lsrs	r3, r3, #6
 80035da:	2200      	movs	r2, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	617a      	str	r2, [r7, #20]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035e6:	f04f 0b00 	mov.w	fp, #0
 80035ea:	4652      	mov	r2, sl
 80035ec:	465b      	mov	r3, fp
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	0159      	lsls	r1, r3, #5
 80035f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fc:	0150      	lsls	r0, r2, #5
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	ebb2 080a 	subs.w	r8, r2, sl
 8003606:	eb63 090b 	sbc.w	r9, r3, fp
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003616:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800361a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800361e:	ebb2 0408 	subs.w	r4, r2, r8
 8003622:	eb63 0509 	sbc.w	r5, r3, r9
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	00eb      	lsls	r3, r5, #3
 8003630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003634:	00e2      	lsls	r2, r4, #3
 8003636:	4614      	mov	r4, r2
 8003638:	461d      	mov	r5, r3
 800363a:	eb14 030a 	adds.w	r3, r4, sl
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	eb45 030b 	adc.w	r3, r5, fp
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003652:	4629      	mov	r1, r5
 8003654:	028b      	lsls	r3, r1, #10
 8003656:	4621      	mov	r1, r4
 8003658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800365c:	4621      	mov	r1, r4
 800365e:	028a      	lsls	r2, r1, #10
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	2200      	movs	r2, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	60fa      	str	r2, [r7, #12]
 800366c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003670:	f7fd f8e8 	bl	8000844 <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4613      	mov	r3, r2
 800367a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	3301      	adds	r3, #1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800368c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003696:	e002      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800369c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3740      	adds	r7, #64	; 0x40
 80036a4:	46bd      	mov	sp, r7
 80036a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	017d7840 	.word	0x017d7840

080036b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_GetHCLKFreq+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000000 	.word	0x20000000

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d4:	f7ff fff0 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0a9b      	lsrs	r3, r3, #10
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4903      	ldr	r1, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	0800377c 	.word	0x0800377c

080036f8 <memset>:
 80036f8:	4402      	add	r2, r0
 80036fa:	4603      	mov	r3, r0
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d100      	bne.n	8003702 <memset+0xa>
 8003700:	4770      	bx	lr
 8003702:	f803 1b01 	strb.w	r1, [r3], #1
 8003706:	e7f9      	b.n	80036fc <memset+0x4>

08003708 <__libc_init_array>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	4d0d      	ldr	r5, [pc, #52]	; (8003740 <__libc_init_array+0x38>)
 800370c:	4c0d      	ldr	r4, [pc, #52]	; (8003744 <__libc_init_array+0x3c>)
 800370e:	1b64      	subs	r4, r4, r5
 8003710:	10a4      	asrs	r4, r4, #2
 8003712:	2600      	movs	r6, #0
 8003714:	42a6      	cmp	r6, r4
 8003716:	d109      	bne.n	800372c <__libc_init_array+0x24>
 8003718:	4d0b      	ldr	r5, [pc, #44]	; (8003748 <__libc_init_array+0x40>)
 800371a:	4c0c      	ldr	r4, [pc, #48]	; (800374c <__libc_init_array+0x44>)
 800371c:	f000 f818 	bl	8003750 <_init>
 8003720:	1b64      	subs	r4, r4, r5
 8003722:	10a4      	asrs	r4, r4, #2
 8003724:	2600      	movs	r6, #0
 8003726:	42a6      	cmp	r6, r4
 8003728:	d105      	bne.n	8003736 <__libc_init_array+0x2e>
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003730:	4798      	blx	r3
 8003732:	3601      	adds	r6, #1
 8003734:	e7ee      	b.n	8003714 <__libc_init_array+0xc>
 8003736:	f855 3b04 	ldr.w	r3, [r5], #4
 800373a:	4798      	blx	r3
 800373c:	3601      	adds	r6, #1
 800373e:	e7f2      	b.n	8003726 <__libc_init_array+0x1e>
 8003740:	0800378c 	.word	0x0800378c
 8003744:	0800378c 	.word	0x0800378c
 8003748:	0800378c 	.word	0x0800378c
 800374c:	08003790 	.word	0x08003790

08003750 <_init>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr

0800375c <_fini>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr
